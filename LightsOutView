package lightsout;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import static lightsout.LightsOutModel.*;
import static lightsout.LightsOut.*;
import java.awt.*;
import java.awt.event.*;


/**
 * Implements a Lights Out game with a GUI interface. 
 * 
 * @author Morgan Mischo
 *
 */

@SuppressWarnings("serial")
public class LightsOutView extends JFrame implements ActionListener
{
    // Some formatting constants
    private final static int WIDTH = 600;
    private final static int HEIGHT = 600;
    public final static int ROWS = 5;
    public final static int COLS = 5;
    public final static Color BACKGROUND_COLOR = Color.GRAY;
    public final static Color FOREGROUND_COLOR = Color.WHITE; 
    public final static Color LIGHTS_OUT = Color.WHITE; 
    public final static Color LIGHTS_ON = Color.BLACK;
    public final static Color BOARD_COLOR = Color.BLUE;
    public final static int BORDER = 5;
    public final static int FONT_SIZE = 20;
    
    
    

    /** The "smarts" of the game **/
    private LightsOutModel model;
    
    /** The portion of the GUI that contains the playing surface **/
    private myBoard board;
    
    /** Button for a new game */
    public JButton newGame; 
    
    /** Button for entering/exiting manual setup */
    public JButton manualSetUp; 

    
    
    
    /**
     * Creates and initializes the game.
     */
    public LightsOutView ()
    {
        // Set the title that appears at the top of the window
        setTitle("CS 1410 Lights Out");

        
        // Cause the application to end when the windows is closed
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        
        // Give the window its initial dimensions
        setSize(WIDTH, HEIGHT);

        
        // The root panel contains everything
        JPanel root = new JPanel();
        root.setLayout(new BorderLayout());
        setContentPane(root);

        
        // The center portion contains the playing board
        model = new LightsOutModel(ROWS, COLS);
        board = new myBoard(model, this); 
        root.add(board, BorderLayout.CENTER);
        

        // The bottom portion contains the New Game button
        JButton newGame = new JButton("New Game");
        newGame.setFont(new Font("SansSerif", Font.BOLD, FONT_SIZE));
        newGame.setForeground(FOREGROUND_COLOR);
        newGame.setBackground(BACKGROUND_COLOR);
        newGame.addActionListener(this);
        root.add(newGame, BorderLayout.NORTH);
        
        
        //The top portion contains the Manual SetUp button
        JButton manualSetUp = new JButton("Enter Manual SetUp"); 
        manualSetUp.setFont(new Font("SansSerif", Font.BOLD, FONT_SIZE));
        manualSetUp.setForeground(FOREGROUND_COLOR);
        manualSetUp.setBackground(BACKGROUND_COLOR);
        manualSetUp.addActionListener(this); 
        root.add(manualSetUp, BorderLayout.SOUTH); 
        
        
        // Refresh the display and we're ready
        board.refresh();
        setVisible(true);
    }

    
    /**
     * Called when a button (either new game or manual set up) is clicked
     */
    @Override
    public void actionPerformed (ActionEvent e)
    {
        JButton myJButton = (JButton)e.getSource(); 
        
        if(myJButton.getText().contains("Manual SetUp"))
        {
        if(myJButton.getText().equals("Enter Manual SetUp"))
        {
            model.setManualSetUpMode(true); 
            myJButton.setText("Exit Manual SetUp"); 
        }
        else
        {
            model.setManualSetUpMode(false); 
            myJButton.setText("Enter Manual SetUp");
        }
        }
        else if(myJButton.getText().contains("New Game"))
    {
      model.newGame(); 
      board.refresh(); 
      manualSetUp.setText("Enter Manual SetUp"); 
    }
    }

/**
 * The playing surface of the game.
 */
@SuppressWarnings("serial")
class myBoard extends JPanel implements MouseListener
{

    /** The "smarts" of the game */
    private LightsOutModel model;

    /** The top level GUI for the game */
    private LightsOutView display; 

    /**
     * Creates the board portion of the GUI.
     */
    public myBoard (LightsOutModel model, LightsOutView display)
    {   
        // Record the model and the top-level display
        this.model = model;
        this.display = display;

        // Set the background color and the layout
        setBackground(LightsOutView.BOARD_COLOR);
        setLayout(new GridLayout(LightsOutView.ROWS, LightsOutView.COLS));

        // Create and lay out the grid of squares that make up the game.
        for (int i = 0; i < LightsOutView.ROWS; i++)
        {
            for (int j = 0; j < LightsOutView.COLS; j++)
            {
                Square s = new Square(i, j);
                s.addMouseListener(this);
                add(s);
            }
        }
    }

    /**
     * Refreshes the display. This should be called whenever something changes in the model.
     */
    public void refresh ()
    {
        // Iterate through all of the squares that make up the grid
        Component[] squares = getComponents();
        for (Component c : squares)
        {
            Square s = (Square) c;

            // Set the color of the squares appropriately
            if (model.getColor(s.getRow(), s.getCol()))
            {
                s.setColor(LightsOutView.LIGHTS_OUT);
            }
            else
            {
                s.setColor(LightsOutView.LIGHTS_ON);
            }
        }

        // Ask that this board be repainted
        repaint();
    }

    /**
     * Called whenever a Square is clicked. Notifies the model that a move has been attempted.
     */
    @Override
    public void mouseClicked (MouseEvent e)
    {
    }

    @Override
    public void mousePressed (MouseEvent e)
    {
        Square s = (Square) e.getSource();
        int result = model.clicked(s.getRow(), s.getCol());
        
        if (result == LightsOutModel.WIN)
        {
            JOptionPane.showMessageDialog(this, "You won!");
        }
        refresh();
    }

    @Override
    public void mouseReleased (MouseEvent e)
    {
    }

    @Override
    public void mouseEntered (MouseEvent e)
    {
    }

    @Override
    public void mouseExited (MouseEvent e)
    {
    }
}

/**
 * A single square on the board where a move can be made
 */
@SuppressWarnings("serial")
class Square extends JPanel
{
    /** The row within the board of this Square. Rows are numbered from zero; row zero is at the bottom of the board. */
    private int row;

    /** The column within the board of this Square. Columns are numbered from zero; column zero is at the left */
    private int col;

    /** The current Color of this Square */
    private Color color;

    /**
     * Creates a square and records its row and column
     */
    public Square (int row, int col)
    {
        this.row = row;
        this.col = col;
        this.color = LightsOutView.LIGHTS_ON;
    }

    /**
     * Returns the row of this Square
     */
    public int getRow ()
    {
        return row;
    }

    /**
     * Returns the column of this Square
     */
    public int getCol ()
    {
        return col;
    }

    /**
     * Sets the color of this square
     */
    public void setColor (Color color)
    {
        this.color = color;
    }

    /**
     * Paints this Square onto g
     */
    @Override
    public void paintComponent (Graphics g)
    {
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setColor(LightsOutView.BOARD_COLOR);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.setColor(color);
        g.fillRect(LightsOutView.BORDER, LightsOutView.BORDER, getWidth() - 2 * LightsOutView.BORDER, getHeight() - 2 * LightsOutView.BORDER);
    }
}
}
